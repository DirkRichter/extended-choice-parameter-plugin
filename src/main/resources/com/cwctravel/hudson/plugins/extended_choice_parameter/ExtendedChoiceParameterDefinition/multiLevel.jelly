<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
  xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
  xmlns:i="jelly:fmt" xmlns:p="/lib/hudson/project">
	
	<script type="text/javascript">
			var hiddenNextSelectionId = "";
		  var currentSelection = "";
		
			function unhideNextMultiLevelSelection(name)
			{
				var addAnotherButton = document.getElementById(name + " addAnotherButton");
				addAnotherButton.style.display = "none";
		
				var hiddenNextSelection = document.getElementById(hiddenNextSelectionId);
				hiddenNextSelection.style.display = "inline";
			}
		
			function selectionChanged(select, name)
			{
				if ( typeof selectionChanged.currentMultiLevelMultiSelect == 'undefined' ) {
					selectionChanged.currentMultiLevelMultiSelect = 0;
				}
		
		    var currentMultiLevelMultiSelectDiv = document.getElementById(name + " dropdowns for MultiLevelMultiSelect " + selectionChanged.currentMultiLevelMultiSelect);
				var dropdown = currentMultiLevelMultiSelectDiv.firstChild;
				while (dropdown)
				{
					if (dropdown.getAttribute("id") !== null)
					{
						dropdown.style.display = "none";
					}
					dropdown = dropdown.nextSibling;
				}
		
				select.name = "value";
		
				var selectedItem = select.options[select.selectedIndex].value;
				if (currentSelection !== "")
				{
					currentSelection += ", ";
				}
				currentSelection += selectedItem;
		
		    var nextDropdown = document.getElementById(select.id + " " + selectedItem);
		    if (nextDropdown)
		    {
					nextDropdown.style.display = "inline";
				}
		    else
				{
		      var nextMultiLevelMultiSelectDiv = currentMultiLevelMultiSelectDiv.cloneNode(true);
		
					selectionChanged.currentMultiLevelMultiSelect += 1;						
					nextMultiLevelMultiSelectDiv.setAttribute("id", name + " dropdowns for MultiLevelMultiSelect " + selectionChanged.currentMultiLevelMultiSelect);
						
					var nextDropdown = nextMultiLevelMultiSelectDiv.firstChild;
					var hiddenNextSelectionIdUpdated = false;
					while (nextDropdown)
					{		
						var id = nextDropdown.getAttribute("id");
						if (id !== null)
						{
							nextDropdown.style.display = "none";
		
							id = id.replace("dropdown MultiLevelMultiSelect " + (selectionChanged.currentMultiLevelMultiSelect - 1),
															"dropdown MultiLevelMultiSelect " + selectionChanged.currentMultiLevelMultiSelect);
							nextDropdown.setAttribute("id", id);
		
							if (hiddenNextSelectionIdUpdated === false)
							{
								hiddenNextSelectionId = id;
								hiddenNextSelectionIdUpdated = true;
							}
						}
						
						if (nextDropdown.name === "value")
						{
							nextDropdown.name = "tmp name";
						}
		
						nextDropdown = nextDropdown.nextSibling;
					}
		
					var multiLevelSelections = document.getElementById(name + " MultiLevelSelections");
					
		      multiLevelSelections.appendChild(nextMultiLevelMultiSelectDiv);
		
					var currentSelections = document.getElementById("currentSelections");
					var li = document.getElementById("li to clone").cloneNode();
					li.appendChild(li.ownerDocument.createTextNode(currentSelection));
					currentSelection = "";
					li.setAttribute("id", "");
					li.style.display = "";
					currentSelections.appendChild(li);
					currentSelections.style.display = "inline";
		
					<j:if test="${type eq 'PT_MULTI_LEVEL_MULTI_SELECT'}">
						var addAnotherButton = document.getElementById(name + " addAnotherButton");
						addAnotherButton.style.display = "inline";
					</j:if>
		      // pickup here: make getMultiLevelDropdowns and getChoicesByDropdown
		      // generated from file.
					
		      // I should probably just skip specifying the color per selection.
		      // I should update the color to note that colors will recycle if not enough specified.
		      // I expect people will usually just sample the rainbow anyway.
					
					// also, consider cleaning up the warnings
				}
		  }
	</script>
	
	<j:set var="dropdowns" value="${it.multiLevelDropdownIds}"/>
	<j:set var="choicesByDropdown" value="${it.choicesByDropdownId}"/>
	<j:set var="style" value="display:inline"/>
	
	<div id="${it.name} MultiLevelSelections">
		<div id="${it.name} dropdowns for MultiLevelMultiSelect 0">
			<j:forEach var="dropdown" items="${dropdowns}">
				<select name="tmp name" onchange="selectionChanged(this, '${it.name}')"
								id="${dropdown}" style="${style}">
					<j:forEach var="choice" items="${choicesByDropdown[dropdown]}">
						<option value="${choice}">${choice}</option>
					</j:forEach>
				</select>
				<j:set var="style" value="display:none"/>
				<p></p>
			</j:forEach>
		</div>
	</div>
	<input id="${it.name} addAnotherButton" type="button" value="Add Another"
				 style="display:none"
				 onclick="unhideNextMultiLevelSelection('${it.name}');" />
	<p></p>
	<ol id ="currentSelections" style="display:none">
		<li id="li to clone" style="display:none"></li>
	</ol>
</j:jelly>